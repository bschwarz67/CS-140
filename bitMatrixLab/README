This is a project created by Dr. James Plank in the University of Tennessee EECS department. It is made to demonstrate concepts such as pointers, objects, pointers to objects, and hash tables.
The main purpose of the project is to perform operations on bitmatrices including addition, multiplication, inversion, creation of submatrices. The user can also store and recall these
matrices from a hash table.

The overall structure of this application consists of a header file bitmatrix.h where the classes in use are declared, bitmatrix.cpp where the functions for these classes or defined,
and bit_matrix_editor.cpp, which is a client that allows the user to make use of the API. bit_matrix_editor.cpp and bitmatrix.h were written my the Dr. Plank and commented by me. bitmatrix.cpp
was written by me.

To test-

command line:
g++ -c bit_matrix_editor.cpp
g++ -c bitmatrix.cpp
g++ -o bit_matrix_editor bit_matrix_editor.o bitmatrix.o
./bit_matrix_editor


READ test.txt
STORE a
READ test.txt
STORE b
INVERT
PRINT
SUM a b
PRINT

output should be:

10000
01000
00100
00010
00001

followed by:
00000
00000
00000
00000
00000


commands (copied from lab notes of James Plank):

EMPTY rows cols: Creates a bit-matrix of the given size whose values are all zeros. It sets the current matrix to this matrix.

SET row col value: Sets the given element of the current matrix to the given value.

VAL row col: Returns the value of the given element.

SWAP r1 r2: Swaps the given rows of the current matrix using Swap_Rows().

+= r1 r2: Sets r1 of the current matrix equal to r1+r2 using the R1_Plus_Equals_R2() method.

WRITE fn: Calls the Write() method to write the current matrix to the specified file.

PGM fn pixels border: Calls the PGM() method to create a PGM picture of the current matrix.

STORE key: Makes a copy of the current matrix and stores it into the hash table with the given key. If the key is already in the hash table, it will delete the bit-matrix before putting the copy into the hash table.

RECALL key: If the key is in the hash table, this will set the current matrix to a copy of the bit-matrix stored in the hash table.

ALL: This calls All() and prints out each key, along with the dimensions of the bit-matrix stored there.

SUM key1 key2: This adds the two matrices stored with the given keys and puts the sum into the current matrix.

PRODUCT key1 key2: This multiplies the two matrices stored with the given keys and puts the product into the current matrix.

SUBMATRIX row1 row2 ...: This creates a submatrix of the current matrix with the specified rows, and replaces the current matrix with the submatrix.

INVERT: This inverts the current matrix and replaces it with the inverse.
